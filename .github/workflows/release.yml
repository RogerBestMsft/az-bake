name: Release

on:
  workflow_dispatch: # allow workflow to be manually triggered
  push:
    branches: [main]
    paths:
      # the version number changes in setup.py
      # so only release if that file has changed
      - 'bake/setup.py'

env:
  IMAGE_NAME: builder
  IMAGE_REGISTRY: ghcr.io

jobs:
  build:
    name: Create new Release
    if: "!contains(join(github.event.commits.*.message), '+norelease')"
    # if: "contains(join(github.event.commits.*.message), '+release')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Everything added to release_assets will be published as an asset on the release
      - name: Create Assets Directory
        uses: actions/github-script@v6
        with:
          script: await io.mkdirP('release_assets')

      - name: Get CLI Version
        id: cli_version
        run: python ./tools/cli-version.py

      - name: Build CLI
        run: bash ./tools/build-cli.sh

      # This must be run LAST - AFTER everything is added to release_assets
      - name: Prepare Release Assets
        id: prepare_assets
        run: python ./tools/prepare-assets.py

      - name: Create Release
        id: publish_assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const assets = JSON.parse('${{steps.prepare_assets.outputs.assets}}');

            const release_notes = '${{ steps.cli_version.outputs.changes }}'.replaceAll(',', '\n');

            const releaseResult = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.cli_version.outputs.version }}',
              name: 'v${{ steps.cli_version.outputs.version }}',
              body: release_notes
            });

            const release = releaseResult.data;

            assets.forEach(async a => await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: a.name,
              data: fs.readFileSync(a.path)
            }));

      - name: Get Build Date
        id: build_date
        run: BUILD_DATE="`date -u +"%Y-%m-%dT%H:%M:%SZ"`" && echo "date=$BUILD_DATE" >> $GITHUB_OUTPUT

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >> "${IMAGE_REPOSITORY}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        env:
          BUILD_DATE: ${{ steps.build_date.outputs.date }}
          IMAGE_VERSION: ${{ steps.cli_version.outputs.version }}
          #IMAGE_REPOSITORY: ${{ github.repository }}
        with:
          context: ./builder
          # file: ./builder/Dockerfile
          # platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            IMAGE_VERSION=${{ env.IMAGE_VERSION }}
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
